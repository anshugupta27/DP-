https://practice.geeksforgeeks.org/problems/minimum-sum-partition/0



#include<bits/stdc++.h>
#define int long long int 
#define TRY_HARD ios_base::sync_with_stdio(false);  cin.tie(NULL);  cout.tie(NULL);
using namespace std;
void subsetSum ( int arr[] , int sum , int n , vector < int > &v )
{
    bool dp[n+1][sum+1] ;
    for ( int i = 0 ; i < n+1 ; i++ )
    {
        for ( int j = 0 ; j < sum+1 ; j++ )
        {
            if ( i == 0 )
            dp[i][j] = false ;
            if ( j == 0 )
            dp[i][j] = true ;
        }
    }
    
    for ( int i = 1 ; i < n+1 ; i++ )
    {
        for ( int j = 1 ; j < sum+1 ; j++ )
        {
            if ( arr[i-1] <= j )
            {
                dp[i][j] = dp[i-1][j-arr[i-1]] || dp[i-1][j] ;
            }
            else
            dp[i][j] = dp[i-1][j] ;
            
        }
    }
    for ( int i = 0 ; i <= (sum)/2 ; i++ )
    {
        if ( dp[n][i] == true )
        v.push_back ( i ) ;
     
    }
}

signed main()
 {
	TRY_HARD ;
	int t ;
	cin >> t ;
	while ( t-- )
	{
	    int n , range = 0 ;
	    cin >> n ;
	    int a[n] ;
	    for ( int i = 0 ; i < n ; i++ )
	    {
	        cin >> a[i] ;
	        range = range + a[i] ;
	    }
	    vector < int > v ;
	    int Min = INT_MAX ;
	    subsetSum ( a , range , n , v ) ;
	    for ( int i = 0 ; i < v.size() ; i++ )
	    {
	        int z = range - (2*v[i]) ;
	        Min = min ( Min , z ) ;
	    }
	    cout << Min << endl ;
	    
	    
	}
	
}
