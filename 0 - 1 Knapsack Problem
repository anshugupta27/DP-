https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem/0



#include<bits/stdc++.h>
//#define int long long int 
#define TRY_HARD ios_base::sync_with_stdio(false);  cin.tie(NULL);  cout.tie(NULL);
using namespace std;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//*********************************************************************************************************************************************************************************
//TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD TRY_HARD 
//**********************************************************************************************************************************************************************************
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
int dp[1001][1001] = { -1 } ;


int knapsack ( int wt[] , int val[] , int w , int n )
{
    if ( n == 0 || w == 0 )
    return 0 ;
    
    
        if ( dp[n][w] != -1 )
        return dp[n][w] ;
        
        if ( wt[n-1] <= w )
        {
            return dp[n][w] = max ( val[n-1] + knapsack ( wt , val , w-wt[n-1] , n-1) , 
                                      knapsack ( wt , val , w , n-1 ) ) ;
            
        }
        else
        return dp[n][w] = knapsack ( wt , val , w , n-1 ) ;
    
}


int main()
 {
	TRY_HARD ;
	int t ;
	cin >> t ;
	while ( t-- )
	{
	    int n , w ;
	    cin >> n >> w ;
	    int val[n] , wt[n] ;
	    for ( int i = 0 ; i < n ; i++ )
	    cin >> val[i] ;
	    for ( int i = 0 ; i < n ; i++ )
	    cin >> wt[i] ;
	    for ( int i = 0 ; i < n+1 ; i++ )
	    {
	        for ( int j = 0 ; j < w+1 ; j++ )
	        {
	            dp[i][j] = -1 ;
	        }
	    }
	    cout << knapsack ( wt , val , w , n ) << endl ;
	    
	}
	
        
	
 }
